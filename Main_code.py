# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pLIpQNmVtQ3o7V0LgCRSfSxteMOPUMgS
"""

from google.colab import files

# Upload the Excel file
uploaded = files.upload()

import pandas as pd
from google.colab import files

# Upload the Excel file
uploaded = files.upload()

# Load the Excel file
file_path = list(uploaded.keys())[0]
df = pd.read_excel(file_path)

# Define dictionaries to map numerical values to their respective labels
gender_map = {1: "woman", 2: "man"}
age_map = {1: "less than 18", 2: "18 to 25", 3: "25 to 35", 4: "35 to 45", 5: "45 to 55", 6: "more than 55"}
education_map = {1: "lower than diploma", 2: "diploma", 3: "bachelor", 4: "master", 5: "PHD and higher degrees"}
financial_status_map = {1: "poor", 2: "middle", 3: "rich"}
marital_status_map = {1: "married", 2: "single"}
insurance_map = {1: "insurance 1", 2: "insurance 2", 3: "other insurances"}
decision_style_map = {1: "decisive", 2: "flexible", 3: "Hierarchic", 4: "Integrative"}

# Create a dictionary to store combinations as keys and a list of DMU numbers as values
combination_DMUs = {}

# Iterate through the rows and store DMU numbers for each combination
for index, row in df.iterrows():
    DMU_number = row["DMU"]
    gender = gender_map[row["Gender"]]
    age = age_map[row["Age"]]
    education = education_map[row["Education"]]
    financial_status = financial_status_map[row["Financial Status"]]
    marital_status = marital_status_map[row["Marital Status"]]
    insurance = insurance_map[row["Health insurance coverage"]]
    decision_style = decision_style_map[row["Decision Making Styles"]]

    combination = (
        gender, age, education, financial_status, marital_status, insurance, decision_style
    )

    # Convert the combination to a tuple so it can be used as a dictionary key
    combination_tuple = tuple(combination)

    if combination_tuple in combination_DMUs:
        combination_DMUs[combination_tuple].append(DMU_number)
    else:
        combination_DMUs[combination_tuple] = [DMU_number]

# Create a dictionary to count the number of DMUs for each combination
combination_counts = {}

# Count the number of DMUs for each combination
for combination, DMU_numbers in combination_DMUs.items():
    count = len(DMU_numbers)
    if count in combination_counts:
        combination_counts[count] += 1
    else:
        combination_counts[count] = 1

# Print the unique combinations and their associated DMU numbers
for combination, DMU_numbers in combination_DMUs.items():
    print(f"Combination: {combination} - DMU Numbers: {DMU_numbers}")

# Print the counts of combinations with 1 to 5 DMUs
for i in range(1, 50):
    if i in combination_counts:
        print(f"Number of combinations with {i} DMUs: {combination_counts[i]}")
    else:
        print(f"No combinations with {i} DMUs found.")